# config file for HermesMQTT template skill.
#
# Syntax:
# + Sections for skill-wide settinge in  [global]
# + Settings for language xy in [xy] (always 2-letter-code)
#
# + each line is name and a list of values (1 or more): 
#   name = value
#   name = value, value, value
# + spaces around '=' and ',' are allowed but stripped
# + 'name' may contain letters, digits and some special charaters, 
#    including : / < >
#
# + all config.ini files are read when HermesMQTT starts;
#   after changes a restart is necessary.

# global settings for all skills go in the section [global]:
# BUT: skill-limited sctions are not yet supported
#      (maybe not neeeded?)
#
[global]
this_skill_name = TEMPLATE_SKILL


# These sections are for sentences and sentence snippets
# for each supported language.
# In the skill-action code these can be accessed such as:
# publish_say(:skill_echo, "my new skill")
#
[de]
:skill_echo =  Hallo, ich bin die Hermes-Skill
:slot_echo_1 = der Wert des Slots
:slot_echo_2 = ist
:end_say =     das wars
:ask_echo_slots = soll ich die Slots des Intent aufsagen?
:no_slots =    der Intent hat keine Slots

# rules to identify falsedetection of intents by the
# NLU can be added in the section of each language.
# If the voice command matches one of the rules, it is accepted.
# Only if it matches none of the rules, the action is aborted
# because of false detection!
#
# SayTime:must_include = sp채t, ist
# SayTime:must_chain = sp채t, es, ist
# SayTime:must_chain = sp채t, ist, es
# SayTime:must_span = sp채t, bitte

[en]
:skill_echo =  hello, i am the Hermes skill
:slot_echo_1 = the value of the slot
:slot_echo_2 = is
:end_say =     and done
:ask_echo_slots = do you want me to list the slots of this intent?
:no_slots =    the intent has no slots

# SayTime:must_include = time, is
# SayTime:must_chain = what, is
# SayTime:must_span = can, time, (is|is please)

